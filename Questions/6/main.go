package main

import "fmt"

func main() {
	bchan := make(chan bool)
	//основной метод, которым я пользуюсь для остановки долгоживущих горутин это
	//передача в функцию канала
	//это может быть как отдельный канал или контекст, который сигнализирует о завершении выполнения
	go func(done chan bool, f func()) {
		for {
			select {
			case <-done:
				return
			default:
				f()
			}
		}
	}(bchan, func() { fmt.Println("Hi there") })
	//так и основной канал, через который горутина получает данные
	go func(c chan bool, f func(bool)) {
		for b := range c {
			f(b)
		}
	}(bchan, func(b bool) { fmt.Println(b) })
	close(bchan)
	//остановка любой горутины в любом случае произойдет после завершения программы
	//или при выполнении условия окончания цикла
	//
	//реализация всех диструктивных методов остановки горутины потребует большого количества компьютеров :)
}
